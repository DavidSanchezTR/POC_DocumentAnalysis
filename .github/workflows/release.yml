name: Release

on:
  #push:
  #  branches:
  #    - main

        # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  configuration: 'Release'
  solution_path: 'Aranzadi.DocumentAnalysis/Aranzadi.DocumentAnalysis.csproj'
  solution_restore: 'Aranzadi.DocumentAnalysis.sln'
  nuget_feed_name: 'SWF_Burgos_Spain_Artifacts_feed'
  nuget_feed_source: 'https://pkgs.dev.azure.com/TR-Legal-OnlineServices/_packaging/SWF_Burgos_Spain_Artifacts_feed/nuget/v3/index.json'
  password_ado: ${{ secrets.PASSWORD_ADO }}
  nuget_config: './Nuget.Config'


jobs:

  unit-test:    
    name: Dotnet-Unit-Tests
    uses: tr/aiid202226_SWFBurgos_DocumentAnalysis/.github/workflows/dotnet-unit-tests.yml@main    
    secrets:
      ADO_TKV: ${{ secrets.PASSWORD_ADO }}
      AZURE_TKV: ${{ secrets.AZURE_CREDENTIALS_NONPROD }}

  integration-test:    
    name: Integration-Tests
    uses: tr/aiid202226_SWFBurgos_DocumentAnalysis/.github/workflows/integration-tests.yml@main    
    secrets:
      ADO_TKV: ${{ secrets.PASSWORD_ADO }}
      AZURE_TKV: ${{ secrets.AZURE_CREDENTIALS_NONPROD }}    
    
  build:

    strategy:
      matrix:
        dotnet_version: [6.x]
        nuget_version: [5.x]

    runs-on: windows-latest
    needs: [unit-test, integration-test]
    steps:
    - name: "☁️ Checkout Repository"
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet_version }}

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
      with:
        nuget-version: ${{ matrix.nuget_version }}

    - name: Auth Nuget TR
      run: dotnet nuget add source ${{ env.nuget_feed_source }} --name ${{ env.nuget_feed_name }} --username 'david.sanchezfuentes@thomsonreuters.com' --password ${{ env.password_ado }} --store-password-in-clear-text --configfile ${{ env.nuget_config }}

    - name: Restore Nuget Packages
      run: dotnet restore ${{ env.solution_restore }} --verbosity normal 

    - name: Compile Solution
      run: dotnet.exe publish ${{ env.solution_path }} -c Dev -f net6.0

    - name: Run Dir
      run: dir ${{ github.workspace }} -recurse

    - name: "📂 Create Artifacts Build"
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: Aranzadi.DocumentAnalysis/bin/Dev/net6.0/publish

  release:

    name: Semantic Release
    needs:
      - build
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
    - name: "☁️ Checkout Repository"
      uses: actions/checkout@v3
      with:
        fetch-depth: 0    

    - name: "📂 Download Build Artifacts"
      uses: actions/download-artifact@v3
      with:
        name: build
        path: ${{ github.workspace }}/build

    - name: Bump Version and Push Tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.1
      with:
       tag_prefix: ""
       github_token: ${{ secrets.GITHUB_TOKEN }} 
       
    - name: "🚀 Create Release"
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: false
        prerelease: false
        release_name: Release ${{ steps.tag_version.outputs.new_tag }}
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        body: ${{ steps.tag_version.outputs.changelog }}

    - name: 'Create Version Dir'
      run: mkdir ${{github.workspace}}/build/Version

    - name: 'Add Version Tag'
      run: echo "${{ steps.tag_version.outputs.new_tag }}" > ${{github.workspace}}/build/Version/Version.txt

    - name: 'Show Version Dir'
      run: ls ${{github.workspace}}/build/Version

    - name: 'Create Zip'
      uses: montudor/action-zip@v1
      with:
        args: zip -qq -r build.zip build

    - name: 'Run List Dir'
      run: ls ${{ github.workspace }}

    - name: 'Upload Artifact'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build.zip
        asset_name: DAS.zip
        asset_content_type: application/zip

    - name: 'Delete Build Artifact'
      uses: geekyeggo/delete-artifact@v1
      with:
        name: build   

    - name: "📂 Production Artifact With Version"
      uses: actions/upload-artifact@v2
      with:
        name: build_v
        path: build

    - name: 'Run List Dir'
      run: ls * ${{ github.workspace }}

  deployMockQA:
    name: Deploy Mock Environment
    needs: [release]
    runs-on: BUILD-MICRO-DEV-DAS
    environment:
      name: QA
      url: https://uksouth-iflx-mock-das-qa-app.azurewebsites.net/
    env:           
      AZURE_WEBAPP_NAME: uksouth-iflx-mock-das-qa-app    # set this to your application's name
      AZURE_RESOURCE_GROUP: uksouth-iflx-blue-qa-rg    # set this to your resource group name
      AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
      SUBSCRIPTION: DCO-Legal-N    
      artifact-package-zip-directory-path: "Upload/"
      timeToSleep: '30' 

    steps:  
    
    - name: Clean artifact-package-directory
      run: Remove-Item ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }} -Recurse -Force -ErrorAction SilentlyContinue

    - name: Download Release Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build_v
        path: ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
       
    - name: 'Set Subscription'
      id: setsubscription
      run: az account set --subscription ${{ env.SUBSCRIPTION }}

    - name: 'Run Get Profile AppService'
      id: profiles
      run: echo "::set-output name=profile::$(az webapp deployment list-publishing-profiles --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{ env.SUBSCRIPTION }} --xml --output tsv)"            

    - name: 'Run List Dir'
      id: listar-dir
      run: dir
        
    - name: 'Run Copy Configs'
      id: copyconfig
      run: cp -v ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.TEST.json ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.json

    - name: Stop Azure App Service with Azure CLI
      id: stopappservice
      run: az webapp stop --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ steps.profiles.outputs.profile }}
        package: '${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}'

    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh
  
    - name: Start Azure App Service with Azure CLI
      id: startappservice
      run: az webapp start --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

  systemTests:    
    name: Dotnet-System-Tests
    needs: [deployMockQA]
    uses: tr/aiid202226_SWFBurgos_DocumentAnalysis/.github/workflows/system-tests.yml@main
    secrets:
      ADO_TKV: ${{ secrets.PASSWORD_ADO }}
      AZURE_TKV: ${{ secrets.AZURE_CREDENTIALS_NONPROD }}

  DeployQA:
    name: Deploy QA
    needs: [systemTests]
    strategy:
      matrix:
        destination: [qa]
        colour: [blue]          
    
    runs-on: BUILD-MICRO-DEV-DAS
    environment:
      name: QA
      url: https://uksouth-iflx-${{ matrix.colour }}-das-${{ matrix.destination }}-app.azurewebsites.net/
    env:           
      AZURE_WEBAPP_NAME: uksouth-iflx-${{ matrix.colour }}-das-${{ matrix.destination }}-app    # set this to your application's name
      AZURE_RESOURCE_GROUP: uksouth-iflx-${{ matrix.colour }}-${{ matrix.destination }}-rg    # set this to your resource group name
      AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
      SUBSCRIPTION: DCO-Legal-N    
      artifact-package-zip-directory-path: "Upload/"
      timeToSleep: '30' 

    steps:  
    
    - name: Clean artifact-package-directory
      run: Remove-Item ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }} -Recurse -Force -ErrorAction SilentlyContinue

    - name: Download Release Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build_v
        path: ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
       
    - name: 'Set Subscription'
      id: setsubscription
      run: az account set --subscription ${{ env.SUBSCRIPTION }}     

    - name: 'Run Get Profile AppService'
      id: profiles
      run: echo "::set-output name=profile::$(az webapp deployment list-publishing-profiles --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{ env.SUBSCRIPTION }} --xml --output tsv)"            

    - name: 'Run List Dir'
      id: listar-dir
      run: dir
        
    - name: 'Run Copy Configs'
      id: copyconfig
      run: cp -v ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.${{ matrix.destination }}${{ matrix.colour }}.json ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.json

    - name: Stop Azure App Service with Azure CLI
      id: stopappservice
      run: az webapp stop --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ steps.profiles.outputs.profile }}
        package: '${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}'
                
    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: Start Azure App Service with Azure CLI
      id: startappservice
      run: az webapp start --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}    

  DeployPREBlue:
    name: Deploy PRE Blue
    needs: [DeployQA]
    strategy:
      matrix:
        destination: [pre]
        colour: [blue]  
    
    runs-on: BUILD-MICRO-DEV-DAS
    environment:
      name: PREBLUE
      url: https://uksouth-iflx-${{ matrix.colour }}-das-${{ matrix.destination }}-app.azurewebsites.net/
    env:           
      AZURE_WEBAPP_NAME: uksouth-iflx-${{ matrix.colour }}-das-${{ matrix.destination }}-app    # set this to your application's name
      AZURE_RESOURCE_GROUP: uksouth-iflx-${{ matrix.colour }}-${{ matrix.destination }}-rg    # set this to your resource group name
      AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
      SUBSCRIPTION: DCO-Legal-N    
      artifact-package-zip-directory-path: "Upload/"
      timeToSleep: '30' 

    steps:  
    
    - name: Clean artifact-package-directory
      run: Remove-Item ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }} -Recurse -Force -ErrorAction SilentlyContinue

    - name: Download Release Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build_v
        path: ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Set Subscription'
      id: setsubscription
      run: az account set --subscription ${{ env.SUBSCRIPTION }}
            
    - name: 'Run Get Profile AppService'
      id: profiles
      run: echo "::set-output name=profile::$(az webapp deployment list-publishing-profiles --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{ env.SUBSCRIPTION }} --xml --output tsv)"            

    - name: 'Run List Dir'
      id: listar-dir
      run: dir
        
    - name: 'Run Copy Configs'
      id: copyconfig
      run: cp -v ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.${{ matrix.destination }}${{ matrix.colour }}.json ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.json

    - name: Stop Azure App Service with Azure CLI
      id: stopappservice
      run: az webapp stop --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ steps.profiles.outputs.profile }}
        package: '${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}'
       
    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: Start Azure App Service with Azure CLI
      id: startappservice
      run: az webapp start --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}        

  DeployPREGreen:
    name: Deploy PRE Green
    needs: [DeployQA]
    strategy:
      matrix:
        destination: [pre]
        colour: [green]  
    
    runs-on: BUILD-MICRO-DEV-DAS
    environment:
      name: PREGREEN
      url: https://uksouth-iflx-${{ matrix.colour }}-das-${{ matrix.destination }}-app.azurewebsites.net/
    env:           
      AZURE_WEBAPP_NAME: uksouth-iflx-${{ matrix.colour }}-das-${{ matrix.destination }}-app    # set this to your application's name
      AZURE_RESOURCE_GROUP: uksouth-iflx-${{ matrix.colour }}-${{ matrix.destination }}-rg    # set this to your resource group name
      AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
      SUBSCRIPTION: DCO-Legal-N    
      artifact-package-zip-directory-path: "Upload/"
      timeToSleep: '30'

    steps:  
    
    - name: Clean artifact-package-directory
      run: Remove-Item ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }} -Recurse -Force -ErrorAction SilentlyContinue

    - name: Download Release Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build_v
        path: ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}
     
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Set Subscription'
      id: setsubscription
      run: az account set --subscription ${{ env.SUBSCRIPTION }}
            
    - name: 'Run Get Profile AppService'
      id: profiles
      run: echo "::set-output name=profile::$(az webapp deployment list-publishing-profiles --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{ env.SUBSCRIPTION }} --xml --output tsv)"            

    - name: 'Run List Dir'
      id: listar-dir
      run: dir
        
    - name: 'Run Copy Configs'
      id: copyconfig
      run: cp -v ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.${{ matrix.destination }}${{ matrix.colour }}.json ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.json

    - name: Stop Azure App Service with Azure CLI
      id: stopappservice
      run: az webapp stop --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ steps.profiles.outputs.profile }}
        package: '${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}'

    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: Start Azure App Service with Azure CLI
      id: startappservice
      run: az webapp start --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

  DeployPROBlue:
    name: Deploy PRO Blue
    needs: [DeployPREBlue]
    strategy:
      matrix:
        colour: [blue]
    runs-on: BUILD-MICRO-DEV-DAS
    environment:
      name: PROBLUE
      url: https://westeur-iflx-${{ matrix.colour }}-das-pro-app.azurewebsites.net/
    env:           
      AZURE_WEBAPP_NAME: westeur-iflx-${{ matrix.colour }}-das-pro-app    # set this to your application's name
      AZURE_RESOURCE_GROUP: westeurope-iflx-${{ matrix.colour }}-pro-rg    # set this to your resource group name
      AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
      SUBSCRIPTION: DCO-Legal-P    
      artifact-package-zip-directory-path: "Upload/"
      timeToSleep: '30'

    steps:  
    
    - name: Clean artifact-package-directory
      run: Remove-Item ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }} -Recurse -Force -ErrorAction SilentlyContinue

    - name: Download Release Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build_v
        path: ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}
        
    - name: Azure Login    
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Set Subscription'
      id: setsubscription
      run: az account set --subscription ${{ env.SUBSCRIPTION }}
            
    - name: 'Run Get Profile AppService'
      id: profiles
      run: echo "::set-output name=profile::$(az webapp deployment list-publishing-profiles --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{ env.SUBSCRIPTION }} --xml --output tsv)"            

    - name: 'Run List Dir'
      id: listar-dir
      run: dir
        
    - name: 'Run Copy Configs'
      id: copyconfig
      run: cp -v ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.PRO${{ matrix.colour }}.json ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.json

    - name: Stop Azure App Service with Azure CLI
      id: stopappservice
      run: az webapp stop --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ steps.profiles.outputs.profile }}
        package: '${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}'

    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: Start Azure App Service with Azure CLI
      id: startappservice
      run: az webapp start --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
    
  DeployPROGreen:
    name: Deploy PRO Green
    needs: [DeployPREGreen]
    strategy:
      matrix:
        colour: [green]
    runs-on: BUILD-MICRO-DEV-DAS
    environment:
      name: PROGREEN
      url: https://westeur-iflx-${{ matrix.colour }}-das-pro-app.azurewebsites.net/
    env:           
      AZURE_WEBAPP_NAME: westeur-iflx-${{ matrix.colour }}-das-pro-app    # set this to your application's name
      AZURE_RESOURCE_GROUP: westeurope-iflx-${{ matrix.colour }}-pro-rg    # set this to your resource group name
      AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
      SUBSCRIPTION: DCO-Legal-P    
      artifact-package-zip-directory-path: "Upload/"
      timeToSleep: '30' 

    steps:  
    
    - name: Clean artifact-package-directory
      run: Remove-Item ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }} -Recurse -Force -ErrorAction SilentlyContinue

    - name: Download Release Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build_v
        path: ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}
        
    - name: Azure Login    
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: 'Set Subscription'
      id: setsubscription
      run: az account set --subscription ${{ env.SUBSCRIPTION }}

    - name: 'Run Get Profile AppService'
      id: profiles
      run: echo "::set-output name=profile::$(az webapp deployment list-publishing-profiles --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{ env.SUBSCRIPTION }} --xml --output tsv)"            

    - name: 'Run List Dir'
      id: listar-dir
      run: dir
        
    - name: 'Run Copy Configs'
      id: copyconfig
      run: cp -v ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.PRO${{ matrix.colour }}.json ${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}appsettings.json

    - name: Stop Azure App Service with Azure CLI
      id: stopappservice
      run: az webapp stop --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ steps.profiles.outputs.profile }}
        package: '${{github.workspace}}/${{ env.artifact-package-zip-directory-path }}'

    - name: 'Sleep for ${{ env.timeToSleep }} seconds'
      run: Start-Sleep -s ${{ env.timeToSleep }}
      shell: pwsh

    - name: Start Azure App Service with Azure CLI
      id: startappservice
      run: az webapp start --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}